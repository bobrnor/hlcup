// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEada991cDecodeGitNulanaComBobrnorHlcup(in *jlexer.Lexer, out *VisitList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]Visit, 0, 1)
					} else {
						out.Visits = []Visit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Visit
					(v1).UnmarshalEasyJSON(in)
					out.Visits = append(out.Visits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEada991cEncodeGitNulanaComBobrnorHlcup(out *jwriter.Writer, in VisitList) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Visits {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisitList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisitList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisitList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisitList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup(l, v)
}
func easyjsonEada991cDecodeGitNulanaComBobrnorHlcup1(in *jlexer.Lexer, out *VisitJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "place":
			out.Place = string(in.String())
		case "visited_at":
			out.VisitedAt = int64(in.Int64())
		case "mark":
			out.Mark = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEada991cEncodeGitNulanaComBobrnorHlcup1(out *jwriter.Writer, in VisitJson) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int64(int64(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Int64(int64(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisitJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisitJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisitJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisitJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup1(l, v)
}
func easyjsonEada991cDecodeGitNulanaComBobrnorHlcup2(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "location":
			out.LocationId = int64(in.Int64())
		case "user":
			out.UserId = int64(in.Int64())
		case "visited_at":
			out.VisitedAt = int64(in.Int64())
		case "mark":
			out.Mark = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEada991cEncodeGitNulanaComBobrnorHlcup2(out *jwriter.Writer, in Visit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	out.Int64(int64(in.LocationId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.Int64(int64(in.UserId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int64(int64(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Int64(int64(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEada991cEncodeGitNulanaComBobrnorHlcup2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEada991cDecodeGitNulanaComBobrnorHlcup2(l, v)
}
